{"version":3,"sources":["views/Dashboard/Dashboard.js"],"names":["Dashboard","logout","_this","props","history","push","this","onLoadProdutos","pagina","limit","cardChartData2","labels","datasets","label","backgroundColor","getStyle","borderColor","data","cardChartOpts2","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","legend","display","scales","xAxes","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","min","Math","apply","max","elements","line","tension","borderWidth","point","radius","hitRadius","hoverRadius","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","xs","sm","lg","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","Number","produtos","total","toLocaleString","style","height","react_chartjs_2__WEBPACK_IMPORTED_MODULE_7__","options","React","Component","connect","state","users","authentication","user","dispatch","filtros","produtosActions","getProdutos"],"mappings":"6OAiBMA,6MAMJC,OAAS,WAEPC,EAAKC,MAAMC,QAAQC,KAAK,8FALxBC,KAAKH,MAAMI,eAAe,CAACC,OAAO,EAAGC,MAAM,qCAU3C,IAIMC,EAAiB,CACrBC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEC,MAAO,mBACPC,gBATYC,mBAAS,UAUrBC,YAAa,wBACbC,KAAM,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,OAK7BC,EAAiB,CACrBC,SAAU,CACRC,SAAS,EACTC,OAAQC,kBAEVC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,MAAO,cACPC,cAAe,eAEjBC,MAAO,CACLC,SAAU,EACVC,UAAW,iBAIjBC,MAAO,CACL,CACET,SAAS,EACTM,MAAO,CACLN,SAAS,EACTU,IAAKC,KAAKD,IAAIE,MAAMD,KAAM1B,EAAeE,SAAS,GAAGK,MAAQ,EAC7DqB,IAAKF,KAAKE,IAAID,MAAMD,KAAM1B,EAAeE,SAAS,GAAGK,MAAQ,MAIrEsB,SAAU,CACRC,KAAM,CACJC,QAAS,KACTC,YAAa,GAEfC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,KAKnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMN,UAAU,sBACdH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAUP,UAAU,QAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcQ,OAAOpD,KAAKH,MAAMwD,SAASC,OAAOC,eAAe,UAC9Ed,EAAAC,EAAAC,cAAA,oCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBY,MAAO,CAAEC,OAAQ,SACnDhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAM/C,KAAMP,EAAgBuD,QAAS/C,EAAgB6C,OAAQ,iBArFrDG,IAAMC,WAmHfC,sBAjBf,SAAyBC,GAAO,IACtBC,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,eAAgBZ,EAAaU,EAAbV,SAE/B,MAAO,CACLa,KAFeD,EAATC,KAGNF,QACAX,aAIuB,SAAAc,GACzB,MAAO,CACLlE,eAAgB,SAACmE,GAAD,OAAaD,EAASE,IAAgBC,YAAYF,OAKvDN,CAA6CpE","file":"static/js/19.a0dcab66.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//import { userActions } from \"../../_store/_actions\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Row,\r\n} from 'reactstrap';\r\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\r\nimport { getStyle } from '@coreui/coreui/dist/js/coreui-utilities'\r\n\r\nimport { produtosActions } from \"../../_store/_actions\";\r\n\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onLoadProdutos({pagina:1, limit:1})\r\n  }\r\n\r\n  logout = () => {\r\n    //   this.props.dispatch(userActions.logout());\r\n    this.props.history.push(\"/login\");\r\n  }\r\n\r\n\r\n  render() {\r\n    const brandInfo = getStyle('--info')\r\n\r\n\r\n        // Card Chart 2\r\n    const cardChartData2 = {\r\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n      datasets: [\r\n        {\r\n          label: 'My First dataset',\r\n          backgroundColor: brandInfo,\r\n          borderColor: 'rgba(255,255,255,.55)',\r\n          data: [1, 18, 9, 17, 34, 22, 11],\r\n        },\r\n      ],\r\n    };\r\n\r\n    const cardChartOpts2 = {\r\n      tooltips: {\r\n        enabled: false,\r\n        custom: CustomTooltips\r\n      },\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent',\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent',\r\n            },\r\n\r\n          }],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, cardChartData2.datasets[0].data) - 5,\r\n              max: Math.max.apply(Math, cardChartData2.datasets[0].data) + 5,\r\n            },\r\n          }],\r\n      },\r\n      elements: {\r\n        line: {\r\n          tension: 0.00001,\r\n          borderWidth: 1,\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n            <Card className=\"text-white bg-info\">\r\n              <CardBody className=\"pb-0\">\r\n\r\n                <div className=\"text-value\">{Number(this.props.produtos.total).toLocaleString('pt-BR')}</div>\r\n                <div>Produtos cadastrados</div>\r\n              </CardBody>\r\n              <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\r\n                <Line data={cardChartData2} options={cardChartOpts2} height={70} />\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//export default Dashboard;\r\n\r\nfunction mapStateToProps(state) {\r\n  const { users, authentication, produtos } = state;\r\n  const { user } = authentication;\r\n  return {\r\n    user,\r\n    users, \r\n    produtos\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onLoadProdutos: (filtros) => dispatch(produtosActions.getProdutos(filtros)),\r\n  }\r\n}\r\n//let connectedHomePage = connect(mapStateToProps)(Dashboard);\r\n//export {connectedHomePage as Dashboard};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n"],"sourceRoot":""}